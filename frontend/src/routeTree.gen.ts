/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as protectedRouteRouteImport } from './routes/(protected)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as protectedLearninghubIndexRouteImport } from './routes/(protected)/learninghub/index'
import { Route as protectedFocusIndexRouteImport } from './routes/(protected)/focus/index'
import { Route as protectedDashboardIndexRouteImport } from './routes/(protected)/dashboard/index'
import { Route as protectedCalendarIndexRouteImport } from './routes/(protected)/calendar/index'

const protectedRouteRoute = protectedRouteRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const protectedLearninghubIndexRoute =
  protectedLearninghubIndexRouteImport.update({
    id: '/learninghub/',
    path: '/learninghub/',
    getParentRoute: () => protectedRouteRoute,
  } as any)
const protectedFocusIndexRoute = protectedFocusIndexRouteImport.update({
  id: '/focus/',
  path: '/focus/',
  getParentRoute: () => protectedRouteRoute,
} as any)
const protectedDashboardIndexRoute = protectedDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => protectedRouteRoute,
} as any)
const protectedCalendarIndexRoute = protectedCalendarIndexRouteImport.update({
  id: '/calendar/',
  path: '/calendar/',
  getParentRoute: () => protectedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/calendar': typeof protectedCalendarIndexRoute
  '/dashboard': typeof protectedDashboardIndexRoute
  '/focus': typeof protectedFocusIndexRoute
  '/learninghub': typeof protectedLearninghubIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof protectedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/calendar': typeof protectedCalendarIndexRoute
  '/dashboard': typeof protectedDashboardIndexRoute
  '/focus': typeof protectedFocusIndexRoute
  '/learninghub': typeof protectedLearninghubIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(protected)/calendar/': typeof protectedCalendarIndexRoute
  '/(protected)/dashboard/': typeof protectedDashboardIndexRoute
  '/(protected)/focus/': typeof protectedFocusIndexRoute
  '/(protected)/learninghub/': typeof protectedLearninghubIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/calendar'
    | '/dashboard'
    | '/focus'
    | '/learninghub'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/calendar' | '/dashboard' | '/focus' | '/learninghub'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(protected)'
    | '/(auth)/login'
    | '/(protected)/calendar/'
    | '/(protected)/dashboard/'
    | '/(protected)/focus/'
    | '/(protected)/learninghub/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(protected)/learninghub/': {
      id: '/(protected)/learninghub/'
      path: '/learninghub'
      fullPath: '/learninghub'
      preLoaderRoute: typeof protectedLearninghubIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/focus/': {
      id: '/(protected)/focus/'
      path: '/focus'
      fullPath: '/focus'
      preLoaderRoute: typeof protectedFocusIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/dashboard/': {
      id: '/(protected)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedDashboardIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/calendar/': {
      id: '/(protected)/calendar/'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof protectedCalendarIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface protectedRouteRouteChildren {
  protectedCalendarIndexRoute: typeof protectedCalendarIndexRoute
  protectedDashboardIndexRoute: typeof protectedDashboardIndexRoute
  protectedFocusIndexRoute: typeof protectedFocusIndexRoute
  protectedLearninghubIndexRoute: typeof protectedLearninghubIndexRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedCalendarIndexRoute: protectedCalendarIndexRoute,
  protectedDashboardIndexRoute: protectedDashboardIndexRoute,
  protectedFocusIndexRoute: protectedFocusIndexRoute,
  protectedLearninghubIndexRoute: protectedLearninghubIndexRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  protectedRouteRoute: protectedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
